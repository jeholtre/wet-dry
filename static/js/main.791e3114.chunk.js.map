{"version":3,"sources":["logo.svg","images/river1.jfif","images/river2.jfif","images/river3.jfif","Components/Home.js","Components/Login.js","Components/About.js","Components/DataCollection.js","Components/DataCollectionConfirmation.js","Components/PrelimDataAcq.js","Components/POI.js","routes.js","App.js","index.js"],"names":["MyCarousel","plugins","src","river1","river2","river3","Home","useState","setCurrentLatitude","setCurrentLongitude","updateCoords","useEffect","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","watchPosition","console","log","className","Segment","Real","Button","color","onClick","window","location","href","Login","About","React","open","setOpen","Header","size","Divider","hidden","placeholder","bH","Modal","onClose","onOpen","trigger","Content","image","Description","Actions","DataCollection","currentLatitude","currentLongitude","JSON","parse","localStorage","getItem","trail","setTrail","recording","setRecording","Boolean","started","setStarted","showHelp","setShowHelp","rifflePool","setRifflePool","finishModal","setFinishModal","pauseModal","setPauseModal","POIModal","setPOIModal","initialStateModal","setInitialStateModal","updateTime","stream","streamSection","username","loading","setLoading","a","err","enableHighAccuracy","timeout","maximumAge","Infinity","fn","deps","isReady","toggled","useRef","getDep","current","useRecordTrailPoint","interval","setInterval","fs","p","basin","subbasin","date","Date","toISOString","split","observer","lat","lng","flowstate","POI","photo","clearInterval","getPolyTrail","polyTrail","index","length","push","handleApiLoaded","map","maps","Polyline","strokeColor","path","strokeOpacity","strokeWeight","geodesic","setMap","setItem","stringify","as","textAlign","paddingTop","Icon","name","Popup","content","bootstrapURLKeys","key","center","onGoogleApiLoaded","defaultZoom","Loader","active","disabled","type","basic","icon","inverted","Confirmation","userEmail","setUserEmail","setUserName","setStream","setStreamSection","sectionID","setSectionID","fileName","setFileName","sendCSVEmail","list","user","unshift","jsonObj","csv","objArray","array","str","i","line","convertToCSV","url","btoa","emailjs","send","email","section","then","result","text","error","SubmitModal","setSubmitModal","Container","Form","onSubmit","Field","required","Input","value","onChange","e","d","month","getUTCMonth","year","getUTCFullYear","formatDate","String","padStart","substring","style","height","width","defaultCenter","filename","data","clear","PrelimDataAcq","streamDirection","setStreamDirection","gPSInterval","setGPSInterval","timeIntervalOptions","on","Group","Dropdown","fluid","selection","options","defaultValue","camera","setCamera","dataUri","setDataUri","description","setDescription","FACING_MODES","ENVIRONMENT","facing","setFacing","history","useHistory","Image","bordered","Inline","class","USER","link","onTakePhoto","handleTakePhoto","idealFacingMode","Marker","Grid","columns","relaxed","Column","getMonth","getDate","getFullYear","TextArea","label","minHeight","desc","green","vertical","Main","basename","exact","component","DataCollectionConfirmation","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.791e3114.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export default __webpack_public_path__ + \"static/media/river1.51056941.jfif\";","export default __webpack_public_path__ + \"static/media/river2.22cc8ec7.jfif\";","export default __webpack_public_path__ + \"static/media/river3.1e590b80.jfif\";","import React, {useEffect, useState} from 'react';\r\nimport {Button, Image, Reveal, Segment} from 'semantic-ui-react';\r\nimport Main from \"../routes\";\r\nimport '../App.css';\r\nimport logo from '../logo.svg';\r\nimport Carousel from '@brainhubeu/react-carousel';\r\nimport '@brainhubeu/react-carousel/lib/style.css';\r\nimport river1 from \"../images/river1.jfif\";\r\nimport river2 from \"../images/river2.jfif\";\r\nimport river3 from \"../images/river3.jfif\";\r\n\r\nexport const MyCarousel = () => (\r\n    <Carousel plugins={['arrows']}>\r\n        <img src={river1} />\r\n        <img src={river2} />\r\n        <img src={river3} />\r\n    </Carousel>\r\n);\r\n\r\n\r\nfunction Home() {\r\n    const [currentLatitude, setCurrentLatitude] = useState();\r\n    const [currentLongitude, setCurrentLongitude] = useState();\r\n    const [updateCoords, setUpdateCoords] = useState(false);\r\n    useEffect(() => {\r\n        navigator.geolocation.getCurrentPosition((position) => {\r\n            setCurrentLatitude(position.coords.latitude);\r\n            setCurrentLongitude(position.coords.longitude);\r\n        })\r\n    }, [updateCoords]);\r\n\r\n    navigator.geolocation.watchPosition(function(position) {\r\n        console.log(\"Latitude is :\", position.coords.latitude);\r\n        console.log(\"Longitude is :\", position.coords.longitude);\r\n    });\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <header className=\"App-header\">\r\n                <p>\r\n                    Welcome to Wet-Dry Mapping!\r\n                </p>\r\n                <MyCarousel/>\r\n\r\n                <Segment Real>\r\n                    <Button color={'green'} onClick={() => {window.location.href = \"#/PrelimDataAcq\"}}>Start</Button>\r\n                    <Button color={'green'} onClick={() => {window.location.href = \"#/About\"}}>About</Button>\r\n                </Segment>\r\n\r\n                {/*<Segment debugging>*/}\r\n                {/*<p>*/}\r\n                {/*    <button className={\"App-button\"} type={\"button\"} onClick={() => {window.location.href = \"#/DataCollection\"}}>*/}\r\n                {/*        Data Collection*/}\r\n                {/*    </button>*/}\r\n                {/*    <button className={\"App-button\"} type={\"button\"} onClick={() => {window.location.href = \"#/About\"}}>*/}\r\n                {/*        About*/}\r\n                {/*    </button>*/}\r\n                {/*</p>*/}\r\n                {/*<p>*/}\r\n                {/*    <button className={\"App-button\"} type={\"button\"} onClick={() => {window.location.href = \"#/PrelimDataAcq\"}}>*/}\r\n                {/*        Preliminary Data Aqc. Page*/}\r\n                {/*    </button>*/}\r\n                {/*    <button className={\"App-button\"} type={\"button\"} onClick={() => {window.location.href = \"#/DataCollectionConfirmation\"}}>*/}\r\n                {/*        DataCollectionConfirmation Page*/}\r\n                {/*    </button>*/}\r\n                {/*</p>*/}\r\n                {/*<p>*/}\r\n                {/*    <button className={\"App-button\"} type={\"button\"} onClick={() => {window.location.href = \"#/POI\"}}>*/}\r\n                {/*        POI Page*/}\r\n                {/*    </button>*/}\r\n                {/*</p>*/}\r\n                {/*</Segment>*/}\r\n            </header>\r\n        </div>\r\n    );\r\n};\r\nexport default Home;","import React from 'react';\r\nfunction Login()\r\n{\r\n    return (\r\n        <div className={'Login'}>\r\n            <p>this is the login page</p>\r\n        </div>\r\n    );\r\n};\r\nexport default Login;","import React from 'react';\r\nimport {Header, Divider, Segment, Button, Modal} from 'semantic-ui-react';\r\nimport '../css/About.css';\r\nfunction About() {\r\n    const [open, setOpen] = React.useState(false)\r\n\r\n            return (\r\n                <div className={\"About\"}>\r\n                    <Header size={'large'} color={'black'}>About Page</Header>\r\n                    {/*<Segment placeholder className={\"placeHolder\"}>*/}\r\n                    {/*    <p>this is the about page, Temp, can add description here or delete section</p>*/}\r\n                    {/*</Segment>*/}\r\n                    <Divider hidden/>\r\n\r\n                    <Header size={'large'} color={'black'}>Project Description</Header>\r\n                    <Segment placeholder className={\"buttonHolder\"}>\r\n                        <p>Wet-Dry-Mapping is an app designed to help with the data collection process\r\n                            associated with mapping streams. This product allows you to take GPS data points\r\n                            while walking. During the data collection process you can say whether the stream\r\n                            is Wet - Neither - Dry and if it is Wet then whether it is a Pool (Slow moving or no\r\n                            movement)\r\n                            or Riffle (Fast moving)\r\n                        </p>\r\n                    </Segment>\r\n                    <Divider hidden/>\r\n                    {/*<Header size={'large'} color={'black'}>Frequently Asked Questions</Header>*/}\r\n                    {/*<Segment placeholder className={\"placeHolder\"}>*/}\r\n                    {/*    <p>FAQ:</p>*/}\r\n                    {/*    <p>Q1:\" Temp \"</p>*/}\r\n                    {/*    <p>A1:\" Temp \"</p>*/}\r\n                    {/*</Segment>*/}\r\n\r\n                    {/*<Divider hidden/>*/}\r\n                    <Header size={'large'} color={'black'}>Credits</Header>\r\n                    <Segment placeholder className={\"placeHolder\"}>\r\n                        <p>Streamers App Development Team:</p>\r\n                        <p>Product Owner: Zong Deng</p>\r\n                        <p>Project Technical Lead: Emma Ryden</p>\r\n                        <p>Product Technicians: Jason Holtrey, Luke Johnston, Mike Boisvert</p>\r\n                    </Segment>\r\n                    <Segment bH className={\"buttonHolder\"}>\r\n                    <p>\r\n                        <Button color={'green'} onClick={() => {\r\n                            window.location.href = \"#/\"\r\n                        }}>Back</Button>\r\n                        {/*<Popup*/}\r\n                        {/*    trigger={<Button color={'green'}>Help (?)</Button>}*/}\r\n                        {/*    content={'TESTING'}*/}\r\n                        {/*    on={'click'}*/}\r\n                        {/*/>*/}\r\n\r\n                        <Modal\r\n                            onClose={() => setOpen(false)}\r\n                            onOpen={() => setOpen(true)}\r\n                            open={open}\r\n                            trigger={<Button color={'green'}>Help</Button>}\r\n                        >\r\n                            <Modal.Header>Help for the About Page</Modal.Header>\r\n                            <Modal.Content image>\r\n                                <Modal.Description>\r\n                                    <p>\r\n                                        The About page offers basic information about the app and features some general FAQs\r\n                                    </p>\r\n                                    <p>If you need specific help on any page please press the help button near the bottom</p>\r\n                                </Modal.Description>\r\n                            </Modal.Content>\r\n                            <Modal.Actions>\r\n                                <Button color='green' onClick={() => setOpen(false)}>\r\n                                    Close Popup\r\n                                </Button>\r\n                            </Modal.Actions>\r\n                        </Modal>\r\n                    </p>\r\n                </Segment>\r\n                </div>\r\n            );\r\n}\r\n\r\nexport default About;","import React, {useEffect, useRef, useState} from 'react';\r\nimport '../App.css';\r\nimport '../css/DataCollection.css'\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport {Button, Header, Icon, Loader, Modal, Popup, Segment} from \"semantic-ui-react\";\r\nimport GoogleMapReact from 'google-map-react';\r\n\r\n\r\nfunction DataCollection() {\r\n    const [currentLatitude, setCurrentLatitude] = useState();\r\n    const [currentLongitude, setCurrentLongitude] = useState();\r\n    const [trail, setTrail] = useState(JSON.parse(localStorage.getItem(\"trail\")) || []);\r\n    const [recording, setRecording] = useState(false);\r\n    const [started, setStarted] = useState(Boolean(JSON.parse(localStorage.getItem(\"started\"))) || false);\r\n    const [showHelp, setShowHelp] = useState(false);\r\n    const [rifflePool, setRifflePool] = useState(Boolean(JSON.parse(localStorage.getItem(\"rifflePool\"))) || null);\r\n    const [finishModal, setFinishModal] = useState(false);\r\n    const [pauseModal, setPauseModal] = useState(false);\r\n    const [POIModal, setPOIModal] = useState(false);\r\n    const [initialStateModal, setInitialStateModal] = useState(false);\r\n    const [updateTime] = useState((localStorage.getItem('gPSInterval') * 1000) || 1000);\r\n    const [stream, setStream] = useState(localStorage.getItem('stream'));\r\n    const [streamSection, setStreamSection] = useState(localStorage.getItem('streamSection'));\r\n    const [username, setUserName] = useState(localStorage.getItem('username'));\r\n\r\n\r\n    function saveStateToLocal() {\r\n        // localStorage.setItem(\"recording\", recording);\r\n        localStorage.setItem(\"started\", JSON.stringify(started));\r\n        localStorage.setItem(\"rifflePool\", JSON.stringify(rifflePool));\r\n        localStorage.setItem(\"trail\", JSON.stringify(trail));\r\n    }\r\n\r\n\r\n    const [loading, setLoading] = useState(true);\r\n\r\n\r\n     //initial update of coordinates\r\n    useEffect(()=> {\r\n            navigator.geolocation.getCurrentPosition( async function(position) {\r\n                    await setCurrentLatitude(position.coords.latitude);\r\n                    await setCurrentLongitude(position.coords.longitude);\r\n                }, (err) => console.log(err),\r\n                {enableHighAccuracy: false,\r\n                    timeout: 5000,\r\n                    maximumAge: Infinity});\r\n    }, []);\r\n\r\n    function useRecordTrailPoint(fn, deps=[], isReady=true) {\r\n        const toggled = useRef(isReady);\r\n\r\n        const getDep = () => {\r\n            if (toggled.current) {\r\n                return 1;\r\n            }\r\n            if (isReady) {\r\n                toggled.current = true;\r\n            }\r\n            return 0;\r\n        };\r\n        useEffect(() => {\r\n            if (!isReady) {\r\n                return;\r\n            }\r\n            return fn();\r\n        }, [...deps, fn, getDep()]);\r\n    }\r\n    //updates that occur periodically while the user is recording\r\n    useRecordTrailPoint(() => {\r\n        const interval = setInterval(  () => {\r\n            navigator.geolocation.getCurrentPosition( async function(position) {\r\n                    setCurrentLatitude(position.coords.latitude);\r\n                    setCurrentLongitude(position.coords.longitude);\r\n                    let fs;\r\n                    if(rifflePool == \"0\") {\r\n                        fs = \"riffle\";\r\n                    } else if (rifflePool == \"1\") {\r\n                        fs=\"dry\";\r\n                    } else {\r\n                        fs = \"pool\";\r\n                    }\r\n                    let p = {basin: stream, subbasin: streamSection, date: new Date().toISOString().split('T')[0], observer: username, lat: position.coords.latitude, lng: position.coords.longitude, flowstate: fs, POI: null, photo: null};\r\n                    setTrail(trail => [...trail, p]);\r\n                }, () => console.log(\"error\"),\r\n                {enableHighAccuracy: false,\r\n                    timeout: 5000,\r\n                    maximumAge: Infinity});\r\n            // console.log({trail});\r\n        }, updateTime);\r\n        return () => clearInterval(interval);\r\n    }, [], recording);\r\n\r\n    const getPolyTrail = () =>{\r\n        let polyTrail = [];\r\n        for (let index = 0; index < trail.length; index++) {\r\n            if (index % 2 !== 0) {\r\n                polyTrail.push(trail[index]);\r\n            }\r\n        }\r\n        return polyTrail;\r\n    }\r\n\r\n    const  handleApiLoaded = async (map, maps) => {\r\n        let poly = new maps.Polyline({\r\n            strokeColor: \"#d01919\",\r\n            path: getPolyTrail(),\r\n            strokeOpacity: 1.0,\r\n            strokeWeight: 3,\r\n            geodesic: true,\r\n        });\r\n        poly.setMap(map);\r\n        setLoading(false);\r\n        navigator.geolocation.getCurrentPosition( function(position) {\r\n            setCurrentLatitude(position.coords.latitude);\r\n            setCurrentLongitude(position.coords.longitude);\r\n        });\r\n    };\r\n\r\n\r\n    saveStateToLocal(); //this should really not happen every render....\r\n\r\n    return (\r\n        <div className=\"DataCollection\">\r\n            <Header as='h1' textAlign='center' paddingTop=\"10px\">\r\n                <Header.Content>Press Start To Begin Recording!<Icon name='location arrow' className=\"icon\"/></Header.Content>\r\n            </Header>\r\n            <Segment placeholder className=\"placeHolder\" >\r\n                <Header>\r\n                    <div onClick={()=>setShowHelp(false)}>\r\n                        <Popup\r\n                            content={'Press to start and stop recording!'}\r\n                            open={showHelp}\r\n                            position=\"top center\"\r\n                            trigger={\r\n                        <Button color={recording ? \"red\" : \"green\"} onClick={() => {\r\n                            if( rifflePool == null) {\r\n                                setInitialStateModal(true);\r\n                            } else {\r\n                                if(recording) {\r\n                                    setPauseModal(true);\r\n                                }\r\n                                setRecording(!recording);\r\n                                setStarted(true);\r\n                            }\r\n                        }}>\r\n                            {recording ? \"Pause Recording\" :  (started ? \"Resume Recording\" : \"Start Recording\")}\r\n                        </Button>\r\n                        }\r\n                        />\r\n\r\n                    </div>\r\n                    <Icon onClick={() => {\r\n                        setShowHelp(!showHelp)\r\n                    }} name={\"question circle outline\"}/>\r\n                </Header>\r\n                <div className={recording ? \"recording\" : \"not-recording\"} onClick={()=>setShowHelp(false)}>\r\n                    <div className=\"map\">\r\n                        <GoogleMapReact\r\n                        bootstrapURLKeys={{ key: \"AIzaSyB6OJVSeLGq6wfAkC0Vy8e3EVGTKf_aE78\" }}\r\n                        center={{lat: currentLatitude, lng: currentLongitude}}\r\n                        onGoogleApiLoaded={({map, maps}) => handleApiLoaded(map, maps)}\r\n                        defaultZoom={14}/>\r\n\r\n                        { loading ?\r\n                            <div className=\"loaderWrapper\">\r\n                                <Loader active></Loader>\r\n                            </div>\r\n                            :   <div className=\"loaderWrapper\">\r\n                                <Loader disabled></Loader>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <div onClick={()=>setShowHelp(false)}>\r\n                    <Popup\r\n                        content={'Toggle river state here!'}\r\n                        open={showHelp}\r\n                        position=\"top center\"\r\n                        trigger={\r\n                    <div className=\"ui buttons three wide\">\r\n                        <Button onClick={() => {\r\n                            setRifflePool(0);\r\n                        }} className={`ui button ${rifflePool === 0 ? \"primary\" : \"\"}`}>Riffle</Button>\r\n                        <Button onClick={() => {\r\n                            setRifflePool(1);\r\n                        }} className={`ui button ${rifflePool === 1 ? \"primary\" : \"\"}`}>Dry</Button>\r\n                        <Button onClick={() => {\r\n                            setRifflePool(2);\r\n                        }} className={`ui button ${rifflePool === 2 ? \"primary\" : \"\"}`}>Pool</Button>\r\n                    </div> } />\r\n                </div>\r\n\r\n                <p>Current Location: {currentLatitude}, {currentLongitude}</p>\r\n\r\n                <Popup\r\n                    content={\"Add a point of interest or finalize the recording!\"}\r\n                    open={showHelp}\r\n                    position=\"bottom center\"\r\n                    trigger={\r\n                        <div onClick={()=>setShowHelp(false)} className={\"ui buttons three wide\"}>\r\n                            <Button color={\"blue\"} type={\"button\"} onClick={() => {\r\n                                setPOIModal(true);\r\n                            }}>\r\n                                Add POI\r\n                            </Button>}/>\r\n                            { started &&\r\n                            <Button color={\"red\"} type={\"button\"} onClick={()=> {\r\n                                setFinishModal(true);\r\n                            }}>\r\n                                Finish Recording\r\n                            </Button>}/>}\r\n                        </div>}></Popup>\r\n\r\n            </Segment>\r\n            <Modal\r\n                basic\r\n                onClose={() => setInitialStateModal(false)}\r\n                open={initialStateModal}\r\n                size='small'\r\n            >\r\n                <Header icon>\r\n                    <Icon name='exclamation triangle' />\r\n                    Please set the initial state of the river!\r\n                </Header>\r\n                <Modal.Actions>\r\n                    <Button basic color='green' inverted onClick={() => {\r\n                        setInitialStateModal(false)\r\n                        setRifflePool(0);\r\n                        setRecording(true);\r\n                        setStarted(true);\r\n                    }} className={`ui button ${rifflePool === 0 ? \"active\" : \"\"}`}>Riffle</Button>\r\n                    <Button basic color='green' inverted onClick={() => {\r\n                        setInitialStateModal(false)\r\n                        setRifflePool(1);\r\n                        setRecording(true);\r\n                        setStarted(true);\r\n                    }} className={`ui button ${rifflePool === 1 ? \"active\" : \"\"}`}>Dry</Button>\r\n                    <Button basic color='green' inverted onClick={() => {\r\n                        setInitialStateModal(false)\r\n                        setRifflePool(2);\r\n                        setRecording(true);\r\n                        setStarted(true);\r\n                    }} className={`ui button ${rifflePool === 2 ? \"active\" : \"\"}`}>Pool</Button>\r\n                    <Button basic color='red' inverted onClick={() => setInitialStateModal(false)}>\r\n                        <Icon name='remove' /> Back\r\n                    </Button>\r\n                </Modal.Actions>\r\n            </Modal>\r\n            <Modal\r\n                basic\r\n                onClose={() => setFinishModal(false)}\r\n                open={finishModal}\r\n                size='small'>\r\n                <Header icon>\r\n                    <Icon name='exclamation triangle' />\r\n                    Finish Recording?\r\n                </Header>\r\n                <Modal.Content>\r\n                    <p>\r\n                        Once you confirm on the next page, you will be unable to return to this trail.\r\n                    </p>\r\n                </Modal.Content>\r\n                <Modal.Actions>\r\n                    <Button color='green' inverted onClick={() => {\r\n                        setFinishModal(false);\r\n                        window.location.href = \"#/DataCollectionConfirmation\";\r\n                    }}>\r\n                        <Icon name='checkmark' /> Yes\r\n                    </Button>\r\n                    <Button color='red' inverted onClick={() => setFinishModal(false)}>\r\n                        <Icon name='remove' /> No\r\n                    </Button>\r\n                </Modal.Actions>\r\n            </Modal>\r\n\r\n\r\n            <Modal\r\n                basic\r\n                onClose={() => setPauseModal(false)}\r\n                open={pauseModal}\r\n                size='small'>\r\n                <Header icon>\r\n                    <Icon name='pause' />\r\n                    Paused\r\n                </Header>\r\n                <Modal.Content>\r\n                    <p>\r\n                        If you're going to be gone for sometime, consider submitting your data now to prevent any loss of data!\r\n                    </p>\r\n                </Modal.Content>\r\n                <Modal.Actions>\r\n                    <Button color='red' inverted onClick={() => setPauseModal(false)}>\r\n                        <Icon name='remove' /> Close\r\n                    </Button>\r\n                </Modal.Actions>\r\n            </Modal>\r\n\r\n\r\n            <Modal\r\n                basic\r\n                onClose={() => setPOIModal(false)}\r\n                open={POIModal}\r\n                size='small'>\r\n                <Header icon>\r\n                    This will pause the recording! Don't go too far!\r\n                </Header>\r\n                <Modal.Actions>\r\n                    <Button color='green' inverted onClick={() => {\r\n                        setPOIModal(false);\r\n                        window.location.href = \"#/POI\";\r\n                    }}>\r\n                        <Icon name='checkmark' /> Add POI\r\n                    </Button>\r\n                    <Button color='red' inverted onClick={() => setPOIModal(false)}>\r\n                        <Icon name='remove' /> Cancel\r\n                    </Button>\r\n                </Modal.Actions>\r\n            </Modal>\r\n\r\n\r\n        </div>\r\n    );\r\n};\r\nexport default DataCollection;","import React, {useEffect, useState} from 'react';\r\nimport {Button, Container, Form, Header, Icon, Modal, Segment, Loader} from 'semantic-ui-react';\r\nimport GoogleMapReact from \"google-map-react\";\r\nimport {CSVLink} from \"react-csv\";\r\nimport emailjs from 'emailjs-com';\r\n\r\nexport const clearLocalStorage = () => {\r\n    localStorage.clear();\r\n}\r\n\r\nfunction Confirmation()\r\n{\r\n    const [currentLatitude, setCurrentLatitude] = useState();\r\n    const [currentLongitude, setCurrentLongitude] = useState();\r\n    const [loading, setLoading] = useState(true);\r\n    const [updateTime] = useState(1000);\r\n\r\n    const [userEmail, setUserEmail] = useState(localStorage.getItem('userEmail'));\r\n    const [username, setUserName] = useState(localStorage.getItem('username'));\r\n    const [stream, setStream] = useState(localStorage.getItem('stream'));\r\n    const [streamSection, setStreamSection] = useState(localStorage.getItem('streamSection'));\r\n    const [sectionID, setSectionID] = useState(localStorage.getItem('sectionID'));\r\n    const [fileName, setFileName] = useState(\"trail-recording-default\");\r\n    const [trail] = useState(JSON.parse(localStorage.getItem(\"trail\")) || []);\r\n\r\n\r\n    const handleUsernameChange = (e, {value} ) => {\r\n        setUserName(value)\r\n    };\r\n    const handleStreamChange = (e, {value} ) => {\r\n        setStream(value)\r\n    };\r\n    const handleStreamSectionChange = (e, {value} ) => {\r\n        setStreamSection(value)\r\n    };\r\n    const handleSectionIDChange = (e, {value} ) => {\r\n        setSectionID(value)\r\n    };\r\n\r\n    const handleEmailChange = (e, {value} ) => {\r\n        setUserEmail(value)\r\n    };\r\n\r\n    useEffect(()=> {\r\n        const interval = setInterval(  () => {\r\n            navigator.geolocation.getCurrentPosition( async function(position) {\r\n                    await setCurrentLatitude(position.coords.latitude);\r\n                    setCurrentLongitude(position.coords.longitude);\r\n                }, (err) => console.log(err),\r\n                {enableHighAccuracy: false,\r\n                    timeout: 5000,\r\n                    maximumAge: Infinity});\r\n        }, updateTime);\r\n        return () => clearInterval(interval);\r\n    }, []);\r\n\r\n    const handleSubmit = () => {\r\n        localStorage.setItem('username', username)\r\n        localStorage.setItem('stream', stream)\r\n        localStorage.setItem('streamSection', streamSection)\r\n        localStorage.setItem('sectionID', sectionID)\r\n        localStorage.setItem('userEmail', userEmail)\r\n    };\r\n\r\n    navigator.geolocation.watchPosition(function(position) {\r\n        setCurrentLatitude(position.coords.latitude);\r\n        setCurrentLongitude(position.coords.longitude);\r\n        // let p = {latitude: position.coords.latitude, longitude: position.coords.longitude};\r\n    });\r\n    const getPolyTrail = () =>{\r\n        let polyTrail = [];\r\n        for (let index = 0; index < trail.length; index++) {\r\n            if (index % 2 != 0) {\r\n                polyTrail.push(trail[index]);\r\n            }\r\n        }\r\n        return polyTrail;\r\n    }\r\n    const handleApiLoaded = (map, maps) => {\r\n        // use map and maps objects\r\n        let poly = new maps.Polyline({\r\n            strokeColor: \"#d01919\",\r\n            path: getPolyTrail(),\r\n            strokeOpacity: 1.0,\r\n            strokeWeight: 3,\r\n            geodesic: true,\r\n        });\r\n        poly.setMap(map);\r\n        setLoading(false);\r\n        navigator.geolocation.getCurrentPosition( function(position) {\r\n            setCurrentLatitude(position.coords.latitude);\r\n            setCurrentLongitude(position.coords.longitude);\r\n            // let p = {latitude: position.coords.latitude, longitude: position.coords.longitude};\r\n            // setTrail(trail => [...trail, p]);\r\n        });\r\n    };\r\n\r\n    function convertToCSV(objArray) {\r\n        let array = typeof objArray != 'object' ? JSON.parse(objArray) : objArray;\r\n        let str = '';\r\n\r\n        for (let i = 0; i < array.length; i++) {\r\n            let line = '';\r\n            for (let index in array[i]) {\r\n                if (line != '') line += ','\r\n\r\n                line += array[i][index];\r\n            }\r\n\r\n            str += line + '\\r\\n';\r\n        }\r\n\r\n        return str;\r\n    }\r\n\r\n\r\n    function sendCSVEmail(list, user) {\r\n        list.unshift({basin:\"basin\",subbasin:\"subbasin\",date:\"date\",observer:\"observer\",lat:\"lat\",lng:\"lng\", flowstate:\"flowstate\", POI:\"POI\",photo:\"photo\"});\r\n        let jsonObj = JSON.stringify(list);\r\n        console.log({jsonObj});\r\n        let csv = convertToCSV(jsonObj);\r\n        console.log({csv});\r\n        let url = window.btoa(csv);\r\n        console.log(\"email sent\");\r\n        //call api\r\n        emailjs.send('jeholtre', 'template_kpccgdg', {\r\n            csv: url,\r\n            email: userEmail,\r\n            stream: stream,\r\n            section: streamSection,\r\n            user: user,\r\n            fileName: fileName\r\n                }, \"user_0ouDOPAgHvV1VrbQJKOME\")\r\n                    .then((result) => {\r\n                        console.log(\"email response: \" + result.text);\r\n                    }, (error) => {\r\n                        console.log(error.text);\r\n                    });\r\n    }\r\n\r\n\r\n    const [open, setOpen] = React.useState(false)\r\n    const [SubmitModal, setSubmitModal] = useState(false);\r\n\r\n    return (\r\n        <div className=\"PrelimDataAcq\">\r\n            <header>\r\n                <Container>\r\n                    <h1 size=\"huge\"><strong> Stream Data Confirmation </strong></h1>\r\n                    <br></br>\r\n                    <Segment>\r\n                        <Form onSubmit={handleSubmit}>\r\n                            <Form.Field required>\r\n                            <label>Name of Observer: </label>\r\n                            <Form.Input\r\n                                name='userName'\r\n                                value={username}\r\n                                onChange={handleUsernameChange}\r\n                            />\r\n                            <label>Email Address: </label>\r\n                            <Form.Input\r\n                                name='userEmail'\r\n                                value={userEmail}\r\n                                onChange={handleEmailChange}\r\n                            />\r\n                            <label>Stream: </label>\r\n                            <Form.Input\r\n                                name='stream'\r\n                                value={stream}\r\n                                onChange={handleStreamChange}\r\n                            />\r\n                            <label>Stream Section: </label>\r\n                            <Form.Input\r\n                                name='streamSection'\r\n                                value={streamSection}\r\n                                onChange={handleStreamSectionChange}\r\n                            />\r\n                            </Form.Field>\r\n                            <label>Class/Section ID: </label>\r\n                            <Form.Input\r\n                                name='sectionID'\r\n                                value={sectionID}\r\n                                onChange={handleSectionIDChange}\r\n                            />\r\n\r\n                            <Button type=\"submit\" color={'blue'}\r\n                                    disabled = {!username\r\n                                    || !stream\r\n                                    || !userEmail\r\n                                    || !streamSection\r\n                                    }\r\n                                    onClick={() => {\r\n                                        let d = new Date();\r\n                                        let month = d.getUTCMonth();\r\n                                        let year = d.getUTCFullYear();\r\n                                        let formatDate = String(month).padStart(2, '0') + String(year).substring(2, 4);\r\n                                        console.log(formatDate);\r\n                                        setFileName(stream + \"-\" + username + \"-\" + formatDate);\r\n                                        setSubmitModal(true);\r\n                            }}>\r\n                                Submit Data\r\n                            </Button>\r\n\r\n                            {/*Help button */}\r\n                            <Modal\r\n                                onClose={() => setOpen(false)}\r\n                                onOpen={() => setOpen(true)}\r\n                                open={open}\r\n                                trigger={<Button color={'blue'}>Help</Button>}\r\n                            >\r\n                                <Modal.Header>Help for the Confirmation Page</Modal.Header>\r\n                                <Modal.Content image>\r\n                                    <Modal.Description>\r\n                                        <p>\r\n                                            This page is to make sure that all of your inputs from the acquisition\r\n                                            page are correct, and you can change any of them as necessary.\r\n                                        </p>\r\n                                    </Modal.Description>\r\n                                </Modal.Content>\r\n                                <Modal.Actions>\r\n                                    <Button color='blue' onClick={() => setOpen(false)}>\r\n                                        Close Popup\r\n                                    </Button>\r\n                                </Modal.Actions>\r\n                            </Modal>\r\n                        </Form>\r\n                    <br/>\r\n\r\n                    <div className=\"map\" style={{ height: '30vh', width: '30wh' }}>\r\n                        <GoogleMapReact\r\n                            bootstrapURLKeys={{ key: \"AIzaSyB6OJVSeLGq6wfAkC0Vy8e3EVGTKf_aE78\" }}\r\n                            defaultCenter={{lat: 0, lng: 0}}\r\n                            center={{lat: currentLatitude, lng: currentLongitude}}\r\n                            onGoogleApiLoaded={({map, maps})=>handleApiLoaded(map, maps)}\r\n                            defaultZoom={14}/>\r\n                        { loading ?\r\n                            <div className=\"loaderWrapper\">\r\n                                <Loader active></Loader>\r\n                            </div>\r\n                            :   <div className=\"loaderWrapper\">\r\n                                <Loader disabled></Loader>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                    </Segment>\r\n                </Container>\r\n                <br/>\r\n                <p>\r\n\r\n                    <Modal\r\n                        basic\r\n                        onClose={() => setSubmitModal(false)}\r\n                        open={SubmitModal}\r\n                        size='small'>\r\n\r\n                        <Header icon>\r\n                            <Icon name='thumbs up outline' />\r\n                            Success!\r\n                        </Header>\r\n                        <Modal.Content>\r\n                            <p>\r\n                                Would you like to send this recording as a csv to the desired email?\r\n                                Sending POI pictures is not currently supported, sorry for the inconvenience!\r\n                                We highly recommend you download the CSV to your device with the link below!!!!\r\n                            </p>\r\n                            <CSVLink filename={fileName + \".csv\"} data={trail}>Download CSV to device!</CSVLink>\r\n                        </Modal.Content>\r\n                        <Modal.Actions>\r\n                            <Button basic color='red' inverted onClick={() => setSubmitModal(false)}>\r\n                                <Icon name='remove' /> No\r\n                            </Button>\r\n                            <Button color='green' inverted onClick={() => {\r\n                                setSubmitModal(false);\r\n                                sendCSVEmail(trail, username);\r\n                                clearLocalStorage();\r\n                                window.location.href = \"#/\";\r\n                            }}>\r\n                                <Icon name='checkmark' /> Send Email!\r\n                            </Button>\r\n                        </Modal.Actions>\r\n                    </Modal>\r\n\r\n                </p>\r\n            </header>\r\n\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\n\r\nexport default Confirmation;","import React, {useState} from 'react';\r\nimport {Button, Form, Popup, Header, Modal, Segment, Dropdown} from 'semantic-ui-react'\r\nimport '../css/PrelimDataAcq.css'\r\n// need to add corresponding button in Home.js then edit routes as well\r\n// inputs down work\r\n\r\nfunction isEmail(val)\r\n{\r\n    let regEmail =  /^(([^<>()[]\\.,;:\\s@\"]+(.[^<>()[]\\.,;:\\s@\"]+)*)|(\".+\"))@(([[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}])|(([a-zA-Z-0-9]+.)+[a-zA-Z]{2,}))$/;\r\n    return regEmail.test(val);\r\n\r\n}\r\n\r\nfunction PrelimDataAcq()\r\n{\r\n    const [username, setUserName] = useState('');\r\n    const [userEmail, setUserEmail] = useState('');\r\n    // const [falseEmail, setFalseEmail] = useState(null)\r\n    const [stream, setStream] = useState('');\r\n    const [streamSection, setStreamSection] = useState('');\r\n    // need to know if this is correct. default false -> upstream?\r\n    const [streamDirection, setStreamDirection] = useState(Boolean(JSON.parse(localStorage.getItem('streamDirection'))) || null);   // stream direction: 0-> upstream\r\n    const [sectionID, setSectionID] = useState('');\r\n    const [gPSInterval, setGPSInterval] = useState(1)\r\n    const [open, setOpen] = React.useState(false)\r\n\r\n    const handleUsernameChange =    (e, {value} ) => {\r\n        setUserName(value)\r\n    };\r\n    const handleEmailChange =       (e, {value}) => {\r\n        setUserEmail(value)\r\n    };\r\n    const handleStreamChange =      (e, {value} ) => {\r\n        setStream(value)\r\n    };\r\n    const handleStreamSectionChange = (e, {value} ) => {\r\n        setStreamSection(value)\r\n    };\r\n    const handleSectionIDChange =   (e, {value} ) => {\r\n        setSectionID(value)\r\n    };\r\n    const handleGPSIntervalChange = (e, {value}) => {\r\n        setGPSInterval(value)\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n        localStorage.setItem('username', username)\r\n        localStorage.setItem('userEmail', userEmail)\r\n        localStorage.setItem('stream', stream)\r\n        localStorage.setItem('streamSection', streamSection)\r\n        localStorage.setItem('streamDirection',streamDirection)\r\n        localStorage.setItem('gPSInterval',gPSInterval)\r\n        localStorage.setItem('sectionID', sectionID)\r\n        };\r\n\r\n    /**\r\n     * time interval for GPS update\r\n     * @type {({text: string, value: number, key: string}|{text: string, value: number, key: string}|{text: string, value: number, key: string}|{text: string, value: number, key: string}|{text: string, value: number, key: string})[]}\r\n     */\r\n    const timeIntervalOptions = [\r\n        {\r\n            key:    '1s',\r\n            text:   '1s',\r\n            value:  1\r\n        },\r\n        {\r\n            key:    '3s',\r\n            text:   '3s',\r\n            value:  3\r\n        },\r\n        {\r\n            key:    '5s',\r\n            text:   '5s',\r\n            value:  5\r\n        },\r\n        {\r\n            key:    '10s',\r\n            text:   '10s',\r\n            value:  10\r\n        },\r\n        {\r\n            key:    '15s',\r\n            text:   '15s',\r\n            value:  15\r\n        }\r\n    ]\r\n\r\n    return (\r\n        <div className=\"PrelimDataAcq\">\r\n            <Header as='h1' textAlign='center' paddingTop=\"10px\">\r\n                <Header.Content>Preliminary Data Acquisition</Header.Content>\r\n            </Header>\r\n            <Segment className = \"inputAreas\">\r\n                <Form onSubmit={handleSubmit}>\r\n                    <Form.Field required>\r\n                        <label>Name of Observer: </label>\r\n                        <Popup content={'full name'} trigger={<Form.Input\r\n                            placeholder='Your name here'\r\n                            name='userName'\r\n                            value={username}\r\n                            onChange={handleUsernameChange}\r\n                        />}\r\n                               on = 'focus'\r\n                               position = 'top left'\r\n                               inverted\r\n                        />\r\n                    </Form.Field>\r\n\r\n                    <Form.Field required>\r\n                        <label>E-mail for .csv</label>\r\n                        <Popup content={'email address to receive the survey outcome in .csv format'} trigger={<Form.Input\r\n                            name='userEmail'\r\n                            value={userEmail}\r\n                            // error = {{content: 'invalid email address'}}\r\n                            onChange={handleEmailChange}\r\n                            />}\r\n                               on = 'focus'\r\n                               position = 'top left'\r\n                               inverted\r\n                        />\r\n                    </Form.Field>\r\n                    <Form.Field required>\r\n                        <label>Stream: </label>\r\n                        <Form.Input\r\n                            placeholder='Stream name'\r\n                            name='stream'\r\n                            value={stream}\r\n                            onChange={handleStreamChange}\r\n                        />\r\n                    </Form.Field>\r\n\r\n                    <Form.Field required>\r\n                        <label>Stream Section: </label>\r\n                        <Form.Input\r\n                            placeholder='Section/SubBasin'\r\n                            name='streamSection'\r\n                            value={streamSection}\r\n                            onChange={handleStreamSectionChange}\r\n                        />\r\n                    </Form.Field>\r\n\r\n                    <Form.Field required>\r\n                        <label>Current Direction:</label>\r\n                        <div>\r\n                            <Button.Group>\r\n                                <Button\r\n                                    className={`ui ${streamDirection === false ? \"primary\": \"\"} button`}\r\n                                    onClick={() => {\r\n                                    setStreamDirection(false);  // upstream\r\n                                }}>UpStream</Button>\r\n                                <Button\r\n                                    className={`ui ${streamDirection === true ? \"primary\": \"\"} button`}\r\n                                    onClick={() => {\r\n                                    setStreamDirection(true);  // downstream\r\n                                }}>DownStream</Button>\r\n                            </Button.Group>\r\n                        </div>\r\n                    </Form.Field>\r\n\r\n                    <label>Class/Section ID: </label>\r\n                    <Form.Input\r\n                        placeholder='#########'\r\n                        name='sectionID'\r\n                        value={sectionID}\r\n                        onChange={handleSectionIDChange}\r\n                    />\r\n                    <label>Location Update Intervals:</label>\r\n                    <Dropdown placeholder={'Select'}\r\n                              fluid\r\n                              selection\r\n                              options={timeIntervalOptions}\r\n                              defaultValue={timeIntervalOptions[0].value}\r\n                              onChange={handleGPSIntervalChange}\r\n                    />\r\n                    <Button type=\"submit\" color={'blue'}\r\n                            disabled = {!username\r\n                                || !userEmail\r\n                            || !stream\r\n                            || !streamSection\r\n                            || streamDirection == null\r\n                            }\r\n                            onClick={() => {\r\n                        window.location.href = \"#/DataCollection\"}}>Submit\r\n                    </Button>\r\n                </Form>\r\n\r\n                <Button color={'blue'} onClick={() => {\r\n                    window.location.href = \"#/\"}}>Back {/* Funny it send to address '/#/' */}\r\n                </Button>\r\n\r\n                <Modal\r\n                    onClose={() => setOpen(false)}\r\n                    onOpen={() => setOpen(true)}\r\n                    open={open}\r\n                    trigger={<Button color={'blue'}>Help</Button>}\r\n                >\r\n                    <Modal.Header>Help for the Preliminary Data Acquisition Page</Modal.Header>\r\n                    <Modal.Content image>\r\n                        <Modal.Description>\r\n                            <p>\r\n                                PRELIM DATA PAGE DESCRIPTION AND HELP NEEDED HERE\r\n                            </p>\r\n                        </Modal.Description>\r\n                    </Modal.Content>\r\n                    <Modal.Actions>\r\n                        <Button color='green' onClick={() => setOpen(false)}>\r\n                            Close Popup\r\n                        </Button>\r\n                    </Modal.Actions>\r\n                </Modal>\r\n            </Segment>\r\n        </div>\r\n    );\r\n};\r\nexport default PrelimDataAcq;","import React, {useEffect, useState} from 'react';\r\nimport { Button, Image, Header, Icon, Loader, Segment, Grid, Divider, Form } from 'semantic-ui-react';\r\nimport '../css/POI.css';\r\nimport GoogleMapReact from 'google-map-react';\r\nimport Camera, { FACING_MODES } from 'react-html5-camera-photo';\r\nimport 'react-html5-camera-photo/build/css/index.css';\r\nimport { useHistory } from 'react-router';\r\n\r\nfunction POI() {\r\n\r\n    const [currentLatitude, setCurrentLatitude] = useState();\r\n    const [currentLongitude, setCurrentLongitude] = useState();\r\n    const [date, setDate] = useState(new Date());\r\n    const [camera, setCamera] = useState(false);\r\n    const [dataUri, setDataUri] = useState('');\r\n    const [loading, setLoading] = useState(true);\r\n    const [updateTime, setUpdateTime] = useState(1000);\r\n    const [description, setDescription] = useState(\"\");\r\n    const [stream, setStream] = useState(localStorage.getItem(\"stream\") || \"\");\r\n    const [facing, setFacing] = useState(FACING_MODES.ENVIRONMENT);\r\n    const [username, setUserName] = useState(localStorage.getItem('username'));\r\n    const [streamSection, setStreamSection] = useState(localStorage.getItem('streamSection'));\r\n    const [rifflePool, setRifflePool] = useState(Boolean(JSON.parse(localStorage.getItem(\"rifflePool\"))) || null);\r\n\r\n    var trail;\r\n\r\n    let history = useHistory();\r\n\r\n    //Should update everytime position changes\r\n    useEffect(()=> {\r\n        const interval = setInterval(  () => {\r\n            navigator.geolocation.getCurrentPosition( async function(position) {\r\n                await setCurrentLatitude(position.coords.latitude);\r\n                setCurrentLongitude(position.coords.longitude);\r\n            }, (err) => console.log(err), \r\n            {enableHighAccuracy: false,\r\n                timeout: 5000,\r\n                maximumAge: Infinity});\r\n        }, updateTime);\r\n        return () => clearInterval(interval);\r\n    }, []);\r\n\r\n    function handleDesc(e, desc) {\r\n        setDescription(desc.value);\r\n    }\r\n\r\n    function handleSubmit() {\r\n        trail = JSON.parse(localStorage.getItem(\"trail\"));\r\n        let fs;\r\n        if(rifflePool == \"0\") {\r\n            fs = \"riffle\";\r\n        } else if (rifflePool == \"1\") {\r\n            fs=\"dry\";\r\n        } else {\r\n            fs = \"pool\";\r\n        }\r\n        let p = {basin: stream, subbasin: streamSection, date: new Date().toISOString().split('T')[0], observer: username, lat: currentLatitude, lng: currentLongitude, flowstate: fs, POI: description, photo: dataUri ? \"true\" : \"false\"};\r\n        trail.push(p);\r\n        localStorage.setItem('trail', JSON.stringify(trail));\r\n        history.push(\"/DataCollection\");\r\n    }\r\n\r\n    function handleTakePhoto (dataUri) {\r\n        // Do stuff with the photo...\r\n        console.log('takePhoto');\r\n        setDataUri(dataUri);\r\n    }\r\n\r\n    function swapCamera() {\r\n        if (facing === FACING_MODES.ENVIRONMENT) {\r\n            setFacing(FACING_MODES.USER);\r\n        } else {\r\n            setFacing(FACING_MODES.ENVIRONMENT);\r\n        }\r\n    }\r\n\r\n    const handleApiLoaded = (map, maps) => {\r\n        let marker = new maps.Marker({\r\n            position: {lat: currentLatitude, lng: currentLongitude},\r\n            map,\r\n          });\r\n\r\n        setLoading(false);\r\n        navigator.geolocation.getCurrentPosition( function(position) {\r\n            setCurrentLatitude(position.coords.latitude);\r\n            setCurrentLongitude(position.coords.longitude);\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"POI\">\r\n            <Header as='h1' textAlign='center' paddingTop=\"10px\">\r\n                <Header.Content>Point of Interest<Icon name='rss' className=\"icon\"/></Header.Content>\r\n            </Header>\r\n            { camera ? \r\n                 dataUri ?\r\n                <Segment placeholder className=\"placeHolder\">\r\n                    <Image src={dataUri} fluid bordered className=\"preview\"/>\r\n                    <Segment.Inline>\r\n                        {/* <Button className = \"previewButton\" color='green'>Use This Photo</Button> */}\r\n                        <Button className = \"previewButton\" color='red' onClick={ () => { setDataUri(''); } }>Retake Photo</Button>\r\n                    </Segment.Inline>\r\n                </Segment>\r\n                :\r\n                <Segment placeholder className=\"placeHolder\">\r\n                    <div class=\"swap\">\r\n                        <Header icon onClick={() => {swapCamera();}}>\r\n                            <Icon name='exchange' link/>\r\n                        </Header>\r\n                    \r\n                    <Camera className=\"preview\" \r\n                        onTakePhoto = { (dataUri) => { handleTakePhoto(dataUri); } }\r\n                        idealFacingMode = {facing}\r\n                    />\r\n                    </div>\r\n                </Segment>\r\n                :\r\n                <Segment placeholder className=\"placeHolder\">\r\n                    <Header icon >\r\n                        <Icon name='camera retro' />\r\n                        We don't have any photos for your Point of Interest.\r\n                    </Header>\r\n                    <Segment.Inline>\r\n                        <Button color='green' onClick={ () => { setCamera(true); } }>Add Photo</Button>\r\n                    </Segment.Inline>\r\n                </Segment>\r\n            }\r\n            <div className=\"placeHolder\">\r\n                <GoogleMapReact\r\n                    bootstrapURLKeys={{ key: \"AIzaSyB6OJVSeLGq6wfAkC0Vy8e3EVGTKf_aE78\" }}\r\n                    defaultCenter={{lat: 0, lng: 0}}\r\n                    center={{lat: currentLatitude, lng: currentLongitude}}\r\n                    defaultZoom={12}\r\n                    onGoogleApiLoaded={({ map, maps }) => handleApiLoaded(map, maps)}\r\n                >\r\n                </GoogleMapReact>\r\n                { loading ? \r\n                    <div className=\"loaderWrapper\">\r\n                        <Loader active></Loader>\r\n                    </div>\r\n                :   <div className=\"loaderWrapper\">\r\n                        <Loader disabled></Loader>\r\n                    </div>\r\n                }\r\n            </div>\r\n            <Segment className=\"placeHolder\" style={{ height: \"auto\" }}>\r\n                <Form>\r\n                    <Grid columns={2} relaxed='very'>\r\n                        <Grid.Column>\r\n                            <p><Header as='h5'>Location</Header>Latitude: {currentLatitude},<br></br> Longitude: {currentLongitude}</p>\r\n                            <p><Header as='h5'>Date</Header>\r\n                                { (date.getMonth() + 1) + \"/\" + date.getDate() + \"/\" + date.getFullYear() }\r\n                            </p>\r\n                            <p><Header as='h5'>Stream Name</Header>{stream}</p>\r\n                        </Grid.Column>\r\n                        <Grid.Column>\r\n                            <Form.TextArea required label=\"Description\" minHeight={100} onChange={handleDesc}></Form.TextArea>\r\n                            <Form.Button green disabled={dataUri == \"\" || description == \"\"} onClick={ handleSubmit }>Submit</Form.Button>\r\n                        </Grid.Column>\r\n                        <Divider vertical className=\"relative\"></Divider>\r\n                    </Grid>\r\n                </Form>\r\n            </Segment>\r\n        </div>\r\n    );\r\n};\r\nexport default POI;","import React from 'react';\r\nimport {HashRouter, Switch, Route} from 'react-router-dom';\r\n\r\nimport Home from './Components/Home';\r\nimport Login from './Components/Login';\r\nimport About from './Components/About';\r\nimport DataCollection from './Components/DataCollection';\r\nimport DataCollectionConfirmation from './Components/DataCollectionConfirmation';\r\nimport PrelimDataAcq from './Components/PrelimDataAcq';\r\nimport POI from './Components/POI';\r\n\r\nconst Main = () => {\r\n    return (\r\n    <HashRouter basename={\"/wet-dry/\"}>\r\n        <Switch>\r\n            <Route exact path='/' component={Home}/>\r\n            <Route path='/Login' component={Login}/>\r\n            <Route path='/About' component={About}/>\r\n            <Route path='/DataCollection' component={DataCollection}/>\r\n            <Route path='/DataCollectionConfirmation' component={DataCollectionConfirmation}/>\r\n            <Route path='/PrelimDataAcq' component={PrelimDataAcq}/>\r\n            <Route path='/POI' component={POI}/>\r\n        </Switch>\r\n    </HashRouter>\r\n    );\r\n};\r\n\r\nexport default Main;","// import logo from './logo.svg';\r\nimport './App.css';\r\nimport Main from \"./routes\";\r\nimport React from \"react\";\r\n\r\n\r\nfunction App() {\r\n  return (\r\n      <div className=\"App\">\r\n          <Main />\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport {BrowserRouter} from 'react-router-dom/esm/react-router-dom';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <BrowserRouter>\r\n          <App />\r\n      </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n"],"sourceRoot":""}