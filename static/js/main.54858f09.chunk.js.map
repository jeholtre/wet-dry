{"version":3,"sources":["logo.svg","images/river1.jfif","images/river2.jfif","images/river3.jfif","Components/Home.js","Components/Login.js","Components/About.js","Components/DataCollection.js","Components/DataCollectionConfirmation.js","Components/PrelimDataAcq.js","Components/POI.js","routes.js","App.js","index.js"],"names":["MyCarousel","plugins","src","river1","river2","river3","Home","useState","setCurrentLatitude","setCurrentLongitude","updateCoords","useEffect","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","watchPosition","console","log","className","Segment","Real","Button","color","onClick","window","location","href","Login","About","React","open","setOpen","Header","size","Divider","hidden","placeholder","bH","Modal","onClose","onOpen","trigger","Content","image","Description","Actions","DataCollection","currentLatitude","currentLongitude","trail","setTrail","recording","setRecording","started","setStarted","showHelp","setShowHelp","ripplePool","setRipplePool","finishModal","setFinishModal","pauseModal","setPauseModal","initialStateModal","setInitialStateModal","updateTime","loading","setLoading","fn","deps","isReady","toggled","useRef","getDep","current","useRecordTrailPoint","interval","setInterval","a","p","enableHighAccuracy","timeout","maximumAge","Infinity","clearInterval","localStorage","setItem","JSON","stringify","as","textAlign","paddingTop","Icon","name","Popup","content","bootstrapURLKeys","key","center","lat","lng","onGoogleApiLoaded","map","maps","defaultZoom","Loader","active","disabled","type","basic","icon","inverted","Confirmation","Date","SubmitModal","setSubmitModal","Container","Form","Input","value","getItem","style","height","width","defaultCenter","PrelimDataAcq","username","setUserName","stream","setStream","streamSection","setStreamSection","sectionID","setSectionID","onSubmit","onChange","e","POI","date","camera","setCamera","dataUri","setDataUri","history","useHistory","err","Image","fluid","bordered","Inline","onTakePhoto","handleTakePhoto","Grid","columns","relaxed","Column","getMonth","getDate","getFullYear","TextArea","label","minHeight","push","vertical","Main","basename","exact","path","component","DataCollectionConfirmation","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.54858f09.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export default __webpack_public_path__ + \"static/media/river1.51056941.jfif\";","export default __webpack_public_path__ + \"static/media/river2.22cc8ec7.jfif\";","export default __webpack_public_path__ + \"static/media/river3.1e590b80.jfif\";","import React, {useEffect, useState} from 'react';\r\nimport {Button, Image, Reveal, Segment} from 'semantic-ui-react';\r\nimport Main from \"../routes\";\r\nimport '../App.css';\r\nimport logo from '../logo.svg';\r\nimport Carousel from '@brainhubeu/react-carousel';\r\nimport '@brainhubeu/react-carousel/lib/style.css';\r\nimport river1 from \"../images/river1.jfif\";\r\nimport river2 from \"../images/river2.jfif\";\r\nimport river3 from \"../images/river3.jfif\";\r\n\r\nexport const MyCarousel = () => (\r\n    <Carousel plugins={['arrows']}>\r\n        <img src={river1} />\r\n        <img src={river2} />\r\n        <img src={river3} />\r\n    </Carousel>\r\n);\r\n\r\n\r\nfunction Home() {\r\n    const [currentLatitude, setCurrentLatitude] = useState();\r\n    const [currentLongitude, setCurrentLongitude] = useState();\r\n    const [updateCoords, setUpdateCoords] = useState(false);\r\n    useEffect(() => {\r\n        navigator.geolocation.getCurrentPosition((position) => {\r\n            setCurrentLatitude(position.coords.latitude);\r\n            setCurrentLongitude(position.coords.longitude);\r\n        })\r\n    }, [updateCoords]);\r\n\r\n    navigator.geolocation.watchPosition(function(position) {\r\n        console.log(\"Latitude is :\", position.coords.latitude);\r\n        console.log(\"Longitude is :\", position.coords.longitude);\r\n    });\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <header className=\"App-header\">\r\n                <p>\r\n                    Welcome to Wet-Dry Mapping!\r\n                </p>\r\n                <MyCarousel/>\r\n\r\n                <Segment Real>\r\n                    <Button color={'green'} onClick={() => {window.location.href = \"#/PrelimDataAcq\"}}>Start</Button>\r\n                    <Button color={'green'} onClick={() => {window.location.href = \"#/About\"}}>About</Button>\r\n                </Segment>\r\n\r\n                {/*<Segment debugging>*/}\r\n                {/*<p>*/}\r\n                {/*    <button className={\"App-button\"} type={\"button\"} onClick={() => {window.location.href = \"#/DataCollection\"}}>*/}\r\n                {/*        Data Collection*/}\r\n                {/*    </button>*/}\r\n                {/*    <button className={\"App-button\"} type={\"button\"} onClick={() => {window.location.href = \"#/About\"}}>*/}\r\n                {/*        About*/}\r\n                {/*    </button>*/}\r\n                {/*</p>*/}\r\n                {/*<p>*/}\r\n                {/*    <button className={\"App-button\"} type={\"button\"} onClick={() => {window.location.href = \"#/PrelimDataAcq\"}}>*/}\r\n                {/*        Preliminary Data Aqc. Page*/}\r\n                {/*    </button>*/}\r\n                {/*    <button className={\"App-button\"} type={\"button\"} onClick={() => {window.location.href = \"#/DataCollectionConfirmation\"}}>*/}\r\n                {/*        DataCollectionConfirmation Page*/}\r\n                {/*    </button>*/}\r\n                {/*</p>*/}\r\n                {/*<p>*/}\r\n                {/*    <button className={\"App-button\"} type={\"button\"} onClick={() => {window.location.href = \"#/POI\"}}>*/}\r\n                {/*        POI Page*/}\r\n                {/*    </button>*/}\r\n                {/*</p>*/}\r\n                {/*</Segment>*/}\r\n            </header>\r\n        </div>\r\n    );\r\n};\r\nexport default Home;","import React from 'react';\r\nfunction Login()\r\n{\r\n    return (\r\n        <div className={'Login'}>\r\n            <p>this is the login page</p>\r\n        </div>\r\n    );\r\n};\r\nexport default Login;","import React from 'react';\r\nimport {Header, Divider, Segment, Button, Modal} from 'semantic-ui-react';\r\nimport '../css/About.css';\r\nfunction About() {\r\n    const [open, setOpen] = React.useState(false)\r\n\r\n            return (\r\n                <div className={\"About\"}>\r\n                    <Header size={'large'} color={'black'}>About Page</Header>\r\n                    {/*<Segment placeholder className={\"placeHolder\"}>*/}\r\n                    {/*    <p>this is the about page, Temp, can add description here or delete section</p>*/}\r\n                    {/*</Segment>*/}\r\n                    <Divider hidden/>\r\n\r\n                    <Header size={'large'} color={'black'}>Project Description</Header>\r\n                    <Segment placeholder className={\"buttonHolder\"}>\r\n                        <p>Wet-Dry-Mapping is an app designed to help with the data collection process\r\n                            associated with mapping streams. This product allows you to take GPS data points\r\n                            while walking. During the data collection process you can say whether the stream\r\n                            is Wet - Neither - Dry and if it is Wet then whether it is a Pool (Slow moving or no\r\n                            movement)\r\n                            or Riffle (Fast moving)\r\n                        </p>\r\n                    </Segment>\r\n                    <Divider hidden/>\r\n                    {/*<Header size={'large'} color={'black'}>Frequently Asked Questions</Header>*/}\r\n                    {/*<Segment placeholder className={\"placeHolder\"}>*/}\r\n                    {/*    <p>FAQ:</p>*/}\r\n                    {/*    <p>Q1:\" Temp \"</p>*/}\r\n                    {/*    <p>A1:\" Temp \"</p>*/}\r\n                    {/*</Segment>*/}\r\n\r\n                    {/*<Divider hidden/>*/}\r\n                    <Header size={'large'} color={'black'}>Credits</Header>\r\n                    <Segment placeholder className={\"placeHolder\"}>\r\n                        <p>Streamers App Development Team:</p>\r\n                        <p>Product Owner: Zong Deng</p>\r\n                        <p>Project Technical Lead: Emma Ryden</p>\r\n                        <p>Product Technicians: Jason Holtrey, Luke Johnston, Mike Boisvert</p>\r\n                    </Segment>\r\n                    <Segment bH className={\"buttonHolder\"}>\r\n                    <p>\r\n                        <Button color={'green'} onClick={() => {\r\n                            window.location.href = \"#/\"\r\n                        }}>Back</Button>\r\n                        {/*<Popup*/}\r\n                        {/*    trigger={<Button color={'green'}>Help (?)</Button>}*/}\r\n                        {/*    content={'TESTING'}*/}\r\n                        {/*    on={'click'}*/}\r\n                        {/*/>*/}\r\n\r\n                        <Modal\r\n                            onClose={() => setOpen(false)}\r\n                            onOpen={() => setOpen(true)}\r\n                            open={open}\r\n                            trigger={<Button color={'green'}>Help</Button>}\r\n                        >\r\n                            <Modal.Header>Help for the About Page</Modal.Header>\r\n                            <Modal.Content image>\r\n                                <Modal.Description>\r\n                                    <p>\r\n                                        The About page offers basic information about the app and features some general FAQs\r\n                                    </p>\r\n                                    <p>If you need specific help on any page please press the help button near the bottom</p>\r\n                                </Modal.Description>\r\n                            </Modal.Content>\r\n                            <Modal.Actions>\r\n                                <Button color='green' onClick={() => setOpen(false)}>\r\n                                    Close Popup\r\n                                </Button>\r\n                            </Modal.Actions>\r\n                        </Modal>\r\n                    </p>\r\n                </Segment>\r\n                </div>\r\n            );\r\n}\r\n\r\nexport default About;","import React, {useEffect, useRef, useState} from 'react';\r\nimport '../App.css';\r\nimport '../css/DataCollection.css'\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport {Button, Header, Icon, Loader, Modal, Popup, Segment} from \"semantic-ui-react\";\r\nimport {LiveLocation} from \"./LiveLocation\";\r\nimport GoogleMapReact from 'google-map-react';\r\nimport { CSVLink, CSVDownload } from \"react-csv\";\r\n\r\n\r\nfunction DataCollection() {\r\n    const [currentLatitude, setCurrentLatitude] = useState();\r\n    const [currentLongitude, setCurrentLongitude] = useState();\r\n    const [trail, setTrail] = useState([]);\r\n    //const [updateCoords, setUpdateCoords] = useState(false);\r\n    const [recording, setRecording] = useState(false);\r\n    const [started, setStarted] = useState(false);\r\n    const [showHelp, setShowHelp] = useState(false);\r\n    const [ripplePool, setRipplePool] = useState(null);\r\n    const [finishModal, setFinishModal] = useState(false);\r\n    const [pauseModal, setPauseModal] = useState(false);\r\n    const [initialStateModal, setInitialStateModal] = useState(false);\r\n    const [updateTime, setUpdateTime] = useState(1000);\r\n\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    //Should update everytime position changes\r\n\r\n    function useRecordTrailPoint(fn, deps=[], isReady=true) {\r\n        const toggled = useRef(isReady);\r\n\r\n        const getDep = () => {\r\n            if (toggled.current) {\r\n                return 1;\r\n            }\r\n            if (isReady) {\r\n                toggled.current = true;\r\n            }\r\n            return 0;\r\n        };\r\n        useEffect(() => {\r\n            if (!isReady) {\r\n                return;\r\n            }\r\n            return fn();\r\n        }, [...deps, fn, getDep()]);\r\n    }\r\n\r\n\r\n    useRecordTrailPoint(() => {\r\n        const interval = setInterval(  () => {\r\n            navigator.geolocation.getCurrentPosition( async function(position) {\r\n                    setCurrentLatitude(position.coords.latitude);\r\n                    setCurrentLongitude(position.coords.longitude);\r\n                    let p = {latitude: position.coords.latitude, longitude: position.coords.longitude};\r\n                    setTrail(trail => [...trail, p]);\r\n                }, () => console.log(\"error\"),\r\n                {enableHighAccuracy: false,\r\n                    timeout: 5000,\r\n                    maximumAge: Infinity});\r\n            // console.log({trail});\r\n        }, updateTime);\r\n        return () => clearInterval(interval);\r\n    }, [], true);\r\n\r\n\r\n    const handleApiLoaded = (map, maps) => {\r\n        // use map and maps objects\r\n        setLoading(false);\r\n        console.log(\"?\")\r\n        navigator.geolocation.getCurrentPosition( function(position) {\r\n            setCurrentLatitude(position.coords.latitude);\r\n            setCurrentLongitude(position.coords.longitude);\r\n            // let p = {latitude: position.coords.latitude, longitude: position.coords.longitude};\r\n            // setTrail(trail => [...trail, p]);\r\n        });\r\n    };\r\n\r\n    localStorage.setItem(\"trail\", JSON.stringify(trail));\r\n    console.log({trail});\r\n    return (\r\n        <div className=\"DataCollection\">\r\n            <Header as='h1' textAlign='center' paddingTop=\"10px\">\r\n                <Header.Content>Press Start To Begin Recording!<Icon name='location arrow' className=\"icon\"/></Header.Content>\r\n            </Header>\r\n            <Segment placeholder className=\"placeHolder\">\r\n                <Header>\r\n                    <div>\r\n                        <Popup\r\n                            content={'The button starts and pauses the recording!'}\r\n                            open={showHelp}\r\n                            position=\"right center\"\r\n                            trigger={\r\n                        <Button color={recording ? \"red\" : \"green\"} onClick={() => {\r\n                            if( ripplePool == null) {\r\n                                setInitialStateModal(true);\r\n                            } else {\r\n                                if(recording) {\r\n                                    setPauseModal(true);\r\n                                }\r\n                                setRecording(!recording);\r\n                                setStarted(true);\r\n                            }\r\n                        }}>\r\n                            {recording ? \"Pause Recording\" :  (started ? \"Resume Recording\" : \"Start Recording\")}\r\n                        </Button>\r\n                        }\r\n                        />\r\n\r\n                    </div>\r\n                    <Icon onClick={() => {\r\n                        setShowHelp(!showHelp)\r\n                    }} name={\"question circle outline\"}/>\r\n                </Header>\r\n                <div className={recording ? \"recording\" : \"not-recording\"}>\r\n                    <div className=\"map\">\r\n                        <Popup\r\n                            content={'Recording is paused.'}\r\n                            open={(!recording && started)}\r\n                            position={\"bottom center\"}\r\n                            trigger={\r\n                            <GoogleMapReact\r\n                            bootstrapURLKeys={{ key: \"AIzaSyB9xcKvAjPfaHXB8lBW-VfchEe8twYxVrU\" }}\r\n                            center={{lat: currentLatitude, lng: currentLongitude}}\r\n                            onGoogleApiLoaded={handleApiLoaded}\r\n                            defaultZoom={14}\r\n                        >\r\n                        </GoogleMapReact>}/>\r\n                        { loading ?\r\n                            <div className=\"loaderWrapper\">\r\n                                <Loader active></Loader>\r\n                            </div>\r\n                            :   <div className=\"loaderWrapper\">\r\n                                <Loader disabled></Loader>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    <Popup\r\n                        content={'Toggle the current state of the river here!'}\r\n                        open={showHelp}\r\n                        position=\"top center\"\r\n                        trigger={\r\n                    <div className=\"ui buttons three wide\">\r\n                        <button onClick={() => {\r\n                            setRipplePool(0);\r\n                        }} className={`ui button ${ripplePool == 0 ? \"active\" : \"\"}`}>Ripple</button>\r\n                        <button onClick={() => {\r\n                            setRipplePool(1);\r\n                        }} className={`ui button ${ripplePool == 1 ? \"active\" : \"\"}`}>Dry</button>\r\n                        <button onClick={() => {\r\n                            setRipplePool(2);\r\n                        }} className={`ui button ${ripplePool == 2 ? \"active\" : \"\"}`}>Pool</button>\r\n                    </div> } />\r\n                </div>\r\n\r\n                <p>Current Location: {currentLatitude}, {currentLongitude}</p>\r\n                <div className={\"ui buttons three wide\"}>\r\n\r\n                    <Popup\r\n                        content={'Press this button to add a point of interest at your current location!'}\r\n                        open={showHelp}\r\n                        position=\"bottom center\"\r\n                        trigger={\r\n                    <Button color={\"green\"} type={\"button\"} onClick={() => {\r\n                        window.location.href = \"#/POI\"\r\n                    }}>\r\n                        Add POI\r\n                    </Button>}/>\r\n                    { started &&\r\n                    <Popup\r\n                        content={\"When you're finished, press this button!\"}\r\n                        open={showHelp}\r\n                        position=\"bottom center\"\r\n                        trigger={\r\n                    <Button color={\"red\"} type={\"button\"} onClick={()=> {\r\n                        setFinishModal(true);\r\n                    }}>\r\n                        Finish Recording\r\n                    </Button>}/>}\r\n\r\n                </div>\r\n\r\n            </Segment>\r\n            <Modal\r\n                basic\r\n                onClose={() => setInitialStateModal(false)}\r\n                open={initialStateModal}\r\n                size='small'\r\n            >\r\n                <Header icon>\r\n                    <Icon name='exclamation triangle' />\r\n                    Please set the initial state of the river!\r\n                </Header>\r\n                <Modal.Actions>\r\n                    <Button basic color='green' inverted onClick={() => {\r\n                        setInitialStateModal(false)\r\n                        setRipplePool(0);\r\n                        setRecording(true);\r\n                        setStarted(true);\r\n                    }} className={`ui button ${ripplePool == 0 ? \"active\" : \"\"}`}>Ripple</Button>\r\n                    <Button basic color='green' inverted onClick={() => {\r\n                        setInitialStateModal(false)\r\n                        setRipplePool(1);\r\n                        setRecording(true);\r\n                        setStarted(true);\r\n                    }} className={`ui button ${ripplePool == 1 ? \"active\" : \"\"}`}>Dry</Button>\r\n                    <Button basic color='green' inverted onClick={() => {\r\n                        setInitialStateModal(false)\r\n                        setRipplePool(2);\r\n                        setRecording(true);\r\n                        setStarted(true);\r\n                    }} className={`ui button ${ripplePool == 2 ? \"active\" : \"\"}`}>Pool</Button>\r\n                    <Button basic color='red' inverted onClick={() => setInitialStateModal(false)}>\r\n                        <Icon name='remove' /> Back\r\n                    </Button>\r\n                </Modal.Actions>\r\n            </Modal>\r\n            <Modal\r\n                basic\r\n                onClose={() => setFinishModal(false)}\r\n                open={finishModal}\r\n                size='small'>\r\n                <Header icon>\r\n                    <Icon name='exclamation triangle' />\r\n                    Finish Recording?\r\n                </Header>\r\n                <Modal.Content>\r\n                    <p>\r\n                        Once you confirm on the next page, you will be unable to return to this trail.\r\n                    </p>\r\n                </Modal.Content>\r\n                <Modal.Actions>\r\n                    <Button basic color='red' inverted onClick={() => setFinishModal(false)}>\r\n                        <Icon name='remove' /> No\r\n                    </Button>\r\n                    {/*<CSVLink data={trail}>Download me</CSVLink>;*/}\r\n                    <Button color='green' inverted onClick={() => {\r\n                        setFinishModal(false);\r\n                        console.log(\"submit\");\r\n                        window.location.href = \"#/DataCollectionConfirmation\";\r\n                    }}>\r\n                        <Icon name='checkmark' /> Yes\r\n                    </Button>\r\n                </Modal.Actions>\r\n            </Modal>\r\n\r\n\r\n            <Modal\r\n                basic\r\n                onClose={() => setPauseModal(false)}\r\n                open={pauseModal}\r\n                size='small'>\r\n                <Header icon>\r\n                    <Icon name='exclamation triangle' />\r\n                    Paused\r\n                </Header>\r\n                <Modal.Content>\r\n                    <p>\r\n                        If you're going to be gone for sometime, consider submitting your data now to prevent any loss of data!\r\n                    </p>\r\n                </Modal.Content>\r\n                <Modal.Actions>\r\n                    <Button basic color='red' inverted onClick={() => setPauseModal(false)}>\r\n                        <Icon name='remove' /> Close\r\n                    </Button>\r\n                </Modal.Actions>\r\n            </Modal>\r\n\r\n\r\n        </div>\r\n    );\r\n};\r\nexport default DataCollection;","import React, {useState} from 'react';\r\nimport {Button, Container, Form, Header, Icon, Input, Modal, Segment} from 'semantic-ui-react';\r\nimport GoogleMapReact from \"google-map-react\";\r\nimport {CSVLink} from \"react-csv\";\r\n\r\n\r\nfunction Confirmation()\r\n{\r\n    const [currentLatitude, setCurrentLatitude] = useState();\r\n    const [currentLongitude, setCurrentLongitude] = useState();\r\n    const [date, setDate] = useState(new Date());\r\n\r\n    navigator.geolocation.watchPosition(function(position) {\r\n        console.log(\"Latitude is :\", position.coords.latitude);\r\n        console.log(\"Longitude is :\", position.coords.longitude);\r\n        setCurrentLatitude(position.coords.latitude);\r\n        setCurrentLongitude(position.coords.longitude);\r\n        // let p = {latitude: position.coords.latitude, longitude: position.coords.longitude};\r\n    });\r\n    const [open, setOpen] = React.useState(false)\r\n    const [SubmitModal, setSubmitModal] = useState(false);\r\n    return (\r\n        <div className=\"PrelimDataAcq\">\r\n            <header>\r\n                <Container>\r\n                    <h1 size=\"huge\"><strong> Stream Data Confirmation </strong></h1>\r\n                    <br></br>\r\n                    <br></br>\r\n                    <Form /*onSubmit={handleSubmit}*/>\r\n                        <label>Name of Surveyor: </label>\r\n                        <Form.Input\r\n                            name='userName'\r\n                            value={localStorage.getItem('username')}\r\n                            //onChange={handleUsernameChange}\r\n                        />\r\n                        <label>Stream: </label>\r\n                        <Form.Input\r\n                            name='stream'\r\n                            value={localStorage.getItem('stream')}\r\n                        />\r\n                        <label>Stream Section: </label>\r\n                        <Form.Input\r\n                            name='streamSection'\r\n                            value={localStorage.getItem('streamSection')}\r\n                        />\r\n                        <label>Class/Section ID: </label>\r\n                        <Form.Input\r\n                            name='sectionID'\r\n                            value={localStorage.getItem('sectionID')}\r\n                        />\r\n                        <Button type=\"submit\" color={'green'}  onClick={() => {\r\n                            setSubmitModal(true);\r\n                        }}>\r\n                            Submit Data\r\n                        </Button>\r\n                    </Form>\r\n                    <br/>\r\n                    <div style={{ height: '40vh', width: '40wh' }}>\r\n                        <GoogleMapReact\r\n                            bootstrapURLKeys={{ key: \"AIzaSyB9xcKvAjPfaHXB8lBW-VfchEe8twYxVrU\" }}\r\n                            defaultCenter={{lat: currentLatitude, lng: currentLongitude}}\r\n                            defaultZoom={12}\r\n                        >\r\n                        </GoogleMapReact>\r\n                    </div>\r\n                </Container>\r\n                <br/>\r\n                <p>\r\n                    <Modal\r\n                        basic\r\n                        onClose={() => setSubmitModal(false)}\r\n                        open={SubmitModal}\r\n                        size='small'>\r\n                        <Header icon>\r\n                            <Icon name='thumbs up outline' />\r\n                            Success!\r\n                        </Header>\r\n                        <Modal.Content>\r\n                            <p>\r\n                                Your CSV File has been successfully uploaded to the associated Google Drive, Return to the home page?\r\n                            </p>\r\n                        </Modal.Content>\r\n                        <Modal.Actions>\r\n                            <Button basic color='red' inverted onClick={() => setSubmitModal(false)}>\r\n                                <Icon name='remove' /> No\r\n                            </Button>\r\n                            <Button color='green' inverted onClick={() => {\r\n                                setSubmitModal(false);\r\n                                window.location.href = \"#/\";\r\n                            }}>\r\n                                <Icon name='checkmark' /> Yes\r\n                            </Button>\r\n                        </Modal.Actions>\r\n                    </Modal>\r\n                    <Modal\r\n                        onClose={() => setOpen(false)}\r\n                        onOpen={() => setOpen(true)}\r\n                        open={open}\r\n                        trigger={<Button color={'green'}>Help</Button>}\r\n                    >\r\n                        <Modal.Header>Help for the Data Collection Confirmation Page</Modal.Header>\r\n                        <Modal.Content image>\r\n                            <Modal.Description>\r\n                                <p>\r\n                                    DATA COLLECTION CONFIRMATION PAGE HELP WIP\r\n                                </p>\r\n                            </Modal.Description>\r\n                        </Modal.Content>\r\n                        <Modal.Actions>\r\n                            <Button color='green' onClick={() => setOpen(false)}>\r\n                                Close Popup\r\n                            </Button>\r\n                        </Modal.Actions>\r\n                    </Modal>\r\n                </p>\r\n            </header>\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\n\r\nexport default Confirmation;","import React, {useState} from 'react';\r\nimport {Button, Form, Grid, Header, Modal, Segment} from 'semantic-ui-react'\r\nimport '../css/PrelimDataAcq.css'\r\n// need to add corresponding button in Home.js then edit routes as well\r\n// inputs down work\r\n\r\nfunction PrelimDataAcq()\r\n{\r\n\r\n    const [username, setUserName] = useState('');\r\n    const [stream, setStream] = useState('');\r\n    const [streamSection, setStreamSection] = useState('');\r\n    const [sectionID, setSectionID] = useState('');\r\n    const [open, setOpen] = React.useState(false)\r\n\r\n    const handleUsernameChange = (e, {value} ) => {\r\n        setUserName(value)\r\n    };\r\n    const handleStreamChange = (e, {value} ) => {\r\n        setStream(value)\r\n    };\r\n    const handleStreamSectionChange = (e, {value} ) => {\r\n        setStreamSection(value)\r\n    };\r\n    const handleSectionIDChange = (e, {value} ) => {\r\n        setSectionID(value)\r\n    };\r\n\r\n    const handleSubmit = () => {\r\n        localStorage.setItem('username', username)\r\n        localStorage.setItem('stream', stream)\r\n        localStorage.setItem('streamSection', streamSection)\r\n        localStorage.setItem('sectionID', sectionID)\r\n        };\r\n\r\n    return (\r\n        <div className=\"PrelimDataAcq\">\r\n            <Header as='h1' textAlign='center' paddingTop=\"10px\">\r\n                <Header.Content>Preliminary Data Acquisition</Header.Content>\r\n            </Header>\r\n            <Segment className = \"inputAreas\">\r\n                <Form onSubmit={handleSubmit}>\r\n                    <label>Name of Surveyor: </label>\r\n                    <Form.Input\r\n                        placeholder='Your name here'\r\n                        name='userName'\r\n                        value={username}\r\n                        onChange={handleUsernameChange}\r\n                    />\r\n                    <label>Stream: </label>\r\n                    <Form.Input\r\n                        placeholder='Stream name'\r\n                        name='stream'\r\n                        value={stream}\r\n                        onChange={handleStreamChange}\r\n                    />\r\n                    <label>Stream Section: </label>\r\n                    <Form.Input\r\n                        placeholder='Section and Direction'\r\n                        name='streamSection'\r\n                        value={streamSection}\r\n                        onChange={handleStreamSectionChange}\r\n                    />\r\n                    <label>Class/Section ID: </label>\r\n                    <Form.Input\r\n                        placeholder='#########'\r\n                        name='sectionID'\r\n                        value={sectionID}\r\n                        onChange={handleSectionIDChange}\r\n                    />\r\n                    <Button type=\"submit\" color={'green'}  onClick={() => {\r\n                        window.location.href = \"#/DataCollection\"}}>Submit\r\n                    </Button>\r\n                </Form>\r\n\r\n                <Button color={'green'} onClick={() => {\r\n                    window.location.href = \"#/\"}}>Back {/* Funny it send to address '/#/' */}\r\n                </Button>\r\n\r\n                <Modal\r\n                    onClose={() => setOpen(false)}\r\n                    onOpen={() => setOpen(true)}\r\n                    open={open}\r\n                    trigger={<Button color={'green'}>Help</Button>}\r\n                >\r\n                    <Modal.Header>Help for the Preliminary Data Acquisition Page</Modal.Header>\r\n                    <Modal.Content image>\r\n                        <Modal.Description>\r\n                            <p>\r\n                                PRELIM DATA PAGE DESCRIPTION AND HELP NEEDED HERE\r\n                            </p>\r\n                        </Modal.Description>\r\n                    </Modal.Content>\r\n                    <Modal.Actions>\r\n                        <Button color='green' onClick={() => setOpen(false)}>\r\n                            Close Popup\r\n                        </Button>\r\n                    </Modal.Actions>\r\n                </Modal>\r\n            </Segment>\r\n        </div>\r\n    );\r\n};\r\nexport default PrelimDataAcq;","import React, {useEffect, useState} from 'react';\r\nimport { Button, Image, Header, Icon, Loader, Segment, Grid, Divider, Form } from 'semantic-ui-react';\r\nimport '../css/POI.css';\r\nimport GoogleMapReact from 'google-map-react';\r\nimport Camera from 'react-html5-camera-photo';\r\nimport 'react-html5-camera-photo/build/css/index.css';\r\nimport { useHistory } from 'react-router';\r\n\r\nfunction POI() {\r\n\r\n    const [currentLatitude, setCurrentLatitude] = useState();\r\n    const [currentLongitude, setCurrentLongitude] = useState();\r\n    const [date, setDate] = useState(new Date());\r\n    const [camera, setCamera] = useState(false);\r\n    const [dataUri, setDataUri] = useState('');\r\n    const [loading, setLoading] = useState(true);\r\n    const [updateTime, setUpdateTime] = useState(1000);\r\n\r\n    let history = useHistory();\r\n\r\n    //Should update everytime position changes\r\n    useEffect(()=> {\r\n        const interval = setInterval(  () => {\r\n            navigator.geolocation.getCurrentPosition( async function(position) {\r\n                await setCurrentLatitude(position.coords.latitude);\r\n                setCurrentLongitude(position.coords.longitude);\r\n                // let p = {latitude: position.coords.latitude, longitude: position.coords.longitude};\r\n                // setTrail(trail => [...trail, p]);s\r\n            }, (err) => console.log(err), \r\n            {enableHighAccuracy: false,\r\n                timeout: 5000,\r\n                maximumAge: Infinity});\r\n            // console.log({trail});\r\n        }, updateTime);\r\n        return () => clearInterval(interval);\r\n    }, []);\r\n\r\n    function handleSubmit() {\r\n        history.push(\"/DataCollection\");\r\n    }\r\n\r\n    function handleTakePhoto (dataUri) {\r\n        // Do stuff with the photo...\r\n        console.log('takePhoto');\r\n        setDataUri(dataUri);\r\n    }\r\n\r\n    const handleApiLoaded = (map, maps) => {\r\n        // use map and maps objects\r\n        setLoading(false);\r\n        navigator.geolocation.getCurrentPosition( function(position) {\r\n            setCurrentLatitude(position.coords.latitude);\r\n            setCurrentLongitude(position.coords.longitude);\r\n            // let p = {latitude: position.coords.latitude, longitude: position.coords.longitude};\r\n            // setTrail(trail => [...trail, p]);\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"POI\">\r\n            <Header as='h1' textAlign='center' paddingTop=\"10px\">\r\n                <Header.Content>Point of Interest<Icon name='rss' className=\"icon\"/></Header.Content>\r\n            </Header>\r\n            { camera ? \r\n                 dataUri ?\r\n                <Segment placeholder className=\"placeHolder\">\r\n                    <Image src={dataUri} fluid bordered className=\"preview\"/>\r\n                    <Segment.Inline>\r\n                        {/* <Button className = \"previewButton\" color='green'>Use This Photo</Button> */}\r\n                        <Button className = \"previewButton\" color='red' onClick={ () => { setDataUri(''); } }>Retake Photo</Button>\r\n                    </Segment.Inline>\r\n                </Segment>\r\n                :\r\n                <Segment placeholder className=\"placeHolder\">\r\n                    <Camera className=\"preview\" \r\n                        onTakePhoto = { (dataUri) => { handleTakePhoto(dataUri); } }\r\n                    />\r\n                </Segment>\r\n                :\r\n                <Segment placeholder className=\"placeHolder\">\r\n                    <Header icon>\r\n                        <Icon name='camera retro' />\r\n                        We don't have any photos for your Point of Interest.\r\n                    </Header>\r\n                    <Segment.Inline>\r\n                        <Button color='green' onClick={ () => { setCamera(true); } }>Add Photo</Button>\r\n                    </Segment.Inline>\r\n                </Segment>\r\n            }\r\n            <div className=\"placeHolder\">\r\n                <GoogleMapReact\r\n                    bootstrapURLKeys={{ key: \"AIzaSyB9xcKvAjPfaHXB8lBW-VfchEe8twYxVrU\" }}\r\n                    defaultCenter={{lat: 0, lng: 0}}\r\n                    center={{lat: currentLatitude, lng: currentLongitude}}\r\n                    defaultZoom={12}\r\n                    onGoogleApiLoaded={handleApiLoaded}\r\n                >\r\n                </GoogleMapReact>\r\n                { loading ? \r\n                    <div className=\"loaderWrapper\">\r\n                        <Loader active></Loader>\r\n                    </div>\r\n                :   <div className=\"loaderWrapper\">\r\n                        <Loader disabled></Loader>\r\n                    </div>\r\n                }\r\n            </div>\r\n            <Segment className=\"placeHolder\" style={{ height: \"auto\" }}>\r\n                <Form>\r\n                    <Grid columns={2} relaxed='very'>\r\n                        <Grid.Column>\r\n                            <p><Header as='h5'>Location</Header>Latitude: {currentLatitude},<br></br> Longitude: {currentLongitude}</p>\r\n                            <p><Header as='h5'>Date</Header>\r\n                                { (date.getMonth() + 1) + \"/\" + date.getDate() + \"/\" + date.getFullYear() }\r\n                            </p>\r\n                            <p><Header as='h5'>Stream Name</Header>Stream Name</p>\r\n                        </Grid.Column>\r\n                        <Grid.Column>\r\n                            <Form.TextArea label=\"Description\" minHeight={100}></Form.TextArea>\r\n                            <Form.Button onClick={ handleSubmit }>Submit</Form.Button>\r\n                        </Grid.Column>\r\n                        <Divider vertical className=\"relative\"></Divider>\r\n                    </Grid>\r\n                </Form>\r\n            </Segment>\r\n{/*             <Card className=\"placeHolder\">\r\n                <Card.Content>\r\n                    <Placeholder>\r\n                    <Placeholder.Image rectangular />\r\n                    </Placeholder>\r\n                </Card.Content>\r\n            </Card> */}\r\n        </div>\r\n    );\r\n};\r\nexport default POI;","import React from 'react';\r\nimport {HashRouter, Switch, Route} from 'react-router-dom';\r\n\r\nimport Home from './Components/Home';\r\nimport Login from './Components/Login';\r\nimport About from './Components/About';\r\nimport DataCollection from './Components/DataCollection';\r\nimport DataCollectionConfirmation from './Components/DataCollectionConfirmation';\r\nimport PrelimDataAcq from './Components/PrelimDataAcq';\r\nimport POI from './Components/POI';\r\n\r\nconst Main = () => {\r\n    return (\r\n    <HashRouter basename={\"/wet-dry/\"}>\r\n        <Switch>\r\n            <Route exact path='/' component={Home}/>\r\n            <Route path='/Login' component={Login}/>\r\n            <Route path='/About' component={About}/>\r\n            <Route path='/DataCollection' component={DataCollection}/>\r\n            <Route path='/DataCollectionConfirmation' component={DataCollectionConfirmation}/>\r\n            <Route path='/PrelimDataAcq' component={PrelimDataAcq}/>\r\n            <Route path='/POI' component={POI}/>\r\n        </Switch>\r\n    </HashRouter>\r\n    );\r\n};\r\n\r\nexport default Main;","// import logo from './logo.svg';\r\nimport './App.css';\r\nimport Main from \"./routes\";\r\nimport React from \"react\";\r\n\r\n\r\nfunction App() {\r\n  return (\r\n      <div className=\"App\">\r\n          <Main />\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport {BrowserRouter} from 'react-router-dom/esm/react-router-dom';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <BrowserRouter>\r\n          <App />\r\n      </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n"],"sourceRoot":""}